function date_heure() {
	id = "date_heure"
	date = new Date;
	annee = date.getFullYear();
    moi = date.getMonth();
    mois = new Array('Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Aout', 'Septembre', 'Octobre', 'Novembre', 'Décembre');
    j = date.getDate();
    jour = date.getDay();
    jours = new Array('Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi');
    h = date.getHours();

	if(h<10) {
		h = "0"+h;
    }
    m = date.getMinutes();
    if(m<10) {
		m = "0"+m;
    }

	s = date.getSeconds();
    if(s<10) {
		s = "0"+s;
    }

	resultat = jours[jour]+' '+j+' '+mois[moi]+'<br>'+h+':'+m+':'+s;
    document.getElementById(id).innerHTML = resultat;
    setTimeout('date_heure("'+id+'");','1000');
}

compt = 1;
function displayNav() {
	$('nav').toggle();
	if(compt%2 == 0)
		$('.bloc').css('margin-left','85px');
	else
		$('.bloc').css('margin-left','10px');

	compt++;
}

function fillTable() {
	$(".tempTableLine:eq(0)").text(sensorsAvg[0].temperature.avg)
	$(".tempTableLine:eq(1)").text((sensorsAvg[0].temperature.avg*9/5 + 32).toFixed(2))
	$(".tempTableLine:eq(2)").text((sensorsAvg[0].temperature.avg + 273.15).toFixed(2))

	$(".tempTableLine:eq(3)").text(sensorsAvg[0].temperature.min)
	$(".tempTableLine:eq(4)").text((sensorsAvg[0].temperature.min*9/5 + 32).toFixed(2))
	$(".tempTableLine:eq(5)").text((sensorsAvg[0].temperature.min + 273.15).toFixed(2))

	$(".tempTableLine:eq(6)").text(sensorsAvg[0].temperature.max)
	$(".tempTableLine:eq(7)").text((sensorsAvg[0].temperature.max*9/5 + 32).toFixed(2))
	$(".tempTableLine:eq(8)").text((sensorsAvg[0].temperature.max + 273.15).toFixed(2))
}

function redirect() {
	window.location = "santé.html"
}

function showHideWarnings() {
	if(sensorsAvg[0].length == 0)
		return;

	if(sensorsAvg[0].temperature.current < 10) {
		$(".warning1").show();
		$(".warning1").attr("title", "Température basse !");
	} else if(sensorsAvg[0].temperature.current > 25) {
		$(".warning1").show();
		$(".warning1").attr("title", "Température élevée !");
	} else
		$(".warning1").hide();

	if(sensorsAvg[0].humidity.current < 40) {
		$(".warning2").show();
		$(".warning2").attr("title", "Humidité basse !");
	} else if(sensorsAvg[0].humidity.current > 65) {
		$(".warning2").show();
		$(".warning2").attr("title", "Humidité élevée !");
	} else
		$(".warning2").hide();
}

function generateJSONData(minT, maxT, minH, maxH, cpt) {
  var date = new Date()
  var data = {
    "id": "D"+(cpt+1),
    "date": date,
    "temperature": {
      "avg": Math.random()*(maxT-minT)+minT,
      "min": Math.random()*(maxT-minT)+minT,
      "max": Math.random()*(maxT-minT)+minT,
      "stddev": Math.random()*30,
      "current": Math.random()*(maxT-minT)+minT
    },
    "humidity": {
      "avg": Math.random()*(maxH-minH)+minH,
      "min": Math.random()*(maxH-minH)+minH,
      "max": Math.random()*(maxH-minH)+minH,
      "stddev": Math.random()*30,
      "current": Math.random()*(maxH-minH)+minH
    }
  }

  return JSON.stringify(data)
}

generateData = true
function autoGenerateData() {
  for(j=0; j<numberOfSensor; j++) {
    data = generateJSONData(0, 50, 0, 100, j)
    if(storeData(data))
      main();
  }
}

//Global var
thermometerImg = null
hygrometerImg = null
sensorsData = []
sensorsAvg = []
numberOfSensor = 7
tempChart = null
humChart = null
function loadWebpageData() {
  thermometerImg = new Image()
  thermometerImg.src = "../icons/thermometer_empty.png"
  hygrometerImg = new Image()
  hygrometerImg.src = "../icons/hygrometer_empty.png"

  $(".warning1").hide();
  $(".warning2").hide();
	date_heure();

  for(i=0; i<numberOfSensor; i++)
    sensorsData.push([])

  if(generateData) {
    autoGenerateData();
    setInterval(autoGenerateData, 1000);
    return;
  }

  getDataFromDatabase(0)

  ws = new WebSocket('ws://51.38.239.114:8080');
  ws.onopen = function () {console.log('Connected to the broker');};
  ws.onmessage = function (evt) {
    if(storeData(evt.data))
      main();
  };
  ws.onclose = function () {console.log('Socket closed');};
}

function main() {
  if(sensorsAvg.length > 50)
    sensorsAvg.pop()

  avg = getSensorsDataAverage()
  if(!avg)
    return;

  sensorsAvg.unshift(avg)

  refreshCanvasHeader(sensorsAvg[0].temperature.current, sensorsAvg[0].humidity.current)
	refreshCanvasBonhomme()
  showHideWarnings();
  fillTable();

  if(tempChart && sensorsAvg.length > 0) {
    tempChart.series[0].addPoint([Date.parse(sensorsAvg[0].date)+7200000, sensorsAvg[0].temperature.current], true, (tempChart.series[0].data.length >= 50));
    tempChart.setTitle({text: "Les dernières températures reçues"})

    humChart.series[0].addPoint([Date.parse(sensorsAvg[0].date)+7200000, sensorsAvg[0].humidity.current], true, (tempChart.series[0].data.length >= 50));
    humChart.setTitle({text: "Les dernières humidités reçues"})
  } else if(sensorsAvg.length > 0) {
    initializeCharts()
  }
}

function getSensorsDataAverage() {
  var sAvg = {
    date: 0,
    temperature: {
      current: 0,
      avg: 0,
      min: 0,
      max: 0
    },
    humidity: {
      current: 0,
      avg: 0,
      min: 0,
      max: 0
    }
  }

  validData = []
  for(i=0; i<sensorsData.length; i++) {
    if(sensorsData[i].length == 0) {
      validData[i] = false;
      continue;
    }

    validData[i] = sensorsData[i][0].isValid
    if(!validData[i])
      continue;

    if(sAvg.date == 0)
      sAvg.date = sensorsData[i][0].date

    sAvg.temperature.current += sensorsData[i][0].temperature.current
    sAvg.temperature.avg += sensorsData[i][0].temperature.avg
    sAvg.temperature.min += sensorsData[i][0].temperature.min
    sAvg.temperature.max += sensorsData[i][0].temperature.max
    sAvg.humidity.current += sensorsData[i][0].humidity.current
    sAvg.humidity.avg += sensorsData[i][0].humidity.avg
    sAvg.humidity.min += sensorsData[i][0].humidity.min
    sAvg.humidity.max += sensorsData[i][0].humidity.max
  }

  if(validData.length == 0)
    return null;

  sAvg.temperature.current /= validData.length
  sAvg.temperature.avg /= validData.length
  sAvg.temperature.min /= validData.length
  sAvg.temperature.max /= validData.length
  sAvg.humidity.current /= validData.length
  sAvg.humidity.avg /= validData.length
  sAvg.humidity.min /= validData.length
  sAvg.humidity.max /= validData.length

  sAvg.temperature.current = Number(sAvg.temperature.current.toFixed(2))
  sAvg.temperature.avg = Number(sAvg.temperature.avg.toFixed(2))
  sAvg.temperature.min = Number(sAvg.temperature.min.toFixed(2))
  sAvg.temperature.max = Number(sAvg.temperature.max.toFixed(2))
  sAvg.humidity.current = Number(sAvg.humidity.current.toFixed(2))
  sAvg.humidity.avg = Number(sAvg.humidity.avg.toFixed(2))
  sAvg.humidity.min = Number(sAvg.humidity.min.toFixed(2))
  sAvg.humidity.max = Number(sAvg.humidity.max.toFixed(2))

  return sAvg;
}

estHomme=true;
function genre() {
	estHomme = !estHomme;
}

function refreshCanvasBonhomme(){
	BonCanv = document.getElementById("bonhomme")
	ctx = BonCanv.getContext("2d")
	ctx.beginPath()
	ctx.fillStyle = "#333333"
	ctx.fillRect(0, 0, BonCanv.width, BonCanv.height)

	BonhommeImg = new Image();
	BonhommeImg.src = "../icons/bonhomme.png"
	ctx.drawImage(BonhommeImg, 0, 0, BonCanv.width, BonCanv.height)

	if(!estHomme) {
		FilleImg = new Image();
		FilleImg.src = "../icons/fille.png"
		ctx.drawImage(FilleImg, 15, 0, 230, 150)
	}

	if(sensorsAvg[0].temperature.current<5){
		ChaussureDImg = new Image();
		ChaussureGImg = new Image();
		EcharpeImg = new Image();
		GantDImg = new Image();
		GantGImg = new Image();
		BonnetImg = new Image();
		PantalonImg = new Image();
		PullImg = new Image();
		GantDImg = new Image();
		GantGImg = new Image();

		ChaussureDImg.src = "../clothes/chaussure_droite.png"
		ChaussureGImg.src = "../clothes/chaussure_gauche.png"
		EcharpeImg.src = "../clothes/echarpe.png"
		GantDImg.src = "../clothes/gant_droit.png"
		GantGImg.src = "../clothes/gant_gauche.png"
		BonnetImg.src = "../clothes/bonnet.png"
		PantalonImg.src = "../clothes/jean.png"
		PullImg.src = "../clothes/pull.png"
		GantDImg.src = "../clothes/gant_droit.png"
		GantGImg.src = "../clothes/gant_gauche.png"

		ctx.drawImage(ChaussureDImg, -15, 440, 170, 125)
		ctx.drawImage(ChaussureGImg, 89	, 440, 170, 125)
		ctx.drawImage(BonnetImg, 38, 0, 180, 100)

		ctx.drawImage(GantGImg, -30,240 ,120 , 150)
		ctx.drawImage(GantDImg, 170,250 ,110 , 140)

		ctx.drawImage(PantalonImg, 8, 270 ,220 , 250)
		ctx.drawImage(PullImg, 25, 135 ,215 , 210)
		ctx.drawImage(EcharpeImg, 45, 100, 190, 125)

	} else if(sensorsAvg[0].temperature.current<10){
		EcharpeImg = new Image();
		ChaussureDImg = new Image();
		ChaussureGImg = new Image();
		PantalonImg = new Image();
		PullImg = new Image();
		ChaussureDImg.src = "../clothes/chaussure_droite.png"
		ChaussureGImg.src = "../clothes/chaussure_gauche.png"
		EcharpeImg.src = "../clothes/echarpe.png"
		PantalonImg.src = "../clothes/jean.png"
		PullImg.src = "../clothes/pull.png"

		ctx.drawImage(ChaussureDImg, -15, 440, 170, 125)
		ctx.drawImage(ChaussureGImg, 89	, 440, 170, 125)
		ctx.drawImage(PantalonImg, 8, 270 ,220 , 250)
		ctx.drawImage(PullImg, 25, 135 ,215 , 210)
		ctx.drawImage(EcharpeImg, 45, 100, 190, 125)

	} else if(sensorsAvg[0].temperature.current<15){
		ChaussureDImg = new Image();
		ChaussureGImg = new Image();
		PantalonImg = new Image();
		PullImg = new Image();
		ChaussureDImg.src = "../clothes/chaussure_droite.png"
		ChaussureGImg.src = "../clothes/chaussure_gauche.png"
		PantalonImg.src = "../clothes/jean.png"
		PullImg.src = "../clothes/pull.png"

		ctx.drawImage(ChaussureDImg, -15, 440, 170, 125)
		ctx.drawImage(ChaussureGImg, 89	, 440, 170, 125)
		ctx.drawImage(PantalonImg, 8, 270 ,220 , 250)
		ctx.drawImage(PullImg, 25, 133 ,215 , 210)

	} else if(sensorsAvg[0].temperature.current<20){
		ChaussureDImg = new Image();
		ChaussureGImg = new Image();
		BermudaImg = new Image();
		PoloImg = new Image();
		ChaussureDImg.src = "../clothes/chaussure_droite.png"
		ChaussureGImg.src = "../clothes/chaussure_gauche.png"
		BermudaImg.src = "../clothes/bermuda.png"
		PoloImg.src = "../clothes/polo.png"
		ctx.drawImage(ChaussureDImg, -15, 440, 170, 125)
		ctx.drawImage(ChaussureGImg, 89	, 440, 170, 125)
		ctx.drawImage(BermudaImg, 40	, 288, 172, 189)
		ctx.drawImage(PoloImg, 56, 132, 150, 200)

	} else if(sensorsAvg[0].temperature.current<25){
		TeeshirtImg = new Image();
		ShortImg = new Image();
		ChaussureDImg = new Image();
		ChaussureGImg = new Image();

		ChaussureDImg.src = "../clothes/chaussure_droite.png"
		ChaussureGImg.src = "../clothes/chaussure_gauche.png"
		TeeshirtImg.src = "../clothes/tee-shirt.png"
		ShortImg.src = "../clothes/short.png"

		ctx.drawImage(ChaussureDImg, -15, 440, 170, 125)
		ctx.drawImage(ChaussureGImg, 89, 440, 170, 125)
		ctx.drawImage(ShortImg, 35, 260, 190, 190)
		ctx.drawImage(TeeshirtImg, 25, 118, 225, 230)
	} else {
		TeeshirtImg = new Image();
		TeeshirtImg.src = "../clothes/tee-shirt.png"
		ctx.drawImage(TeeshirtImg, 25, 118, 225, 230)
	}
}

function refreshCanvasHeader(currTemp, currHum) {
  therCanv = document.getElementById("thermometer")
  ctx = therCanv.getContext("2d")
  ctx.beginPath()
  ctx.fillStyle = "#333333"
  ctx.fillRect(0, 0, therCanv.width, therCanv.width)

  if(currTemp < 0) currTemp = 0
  if(currTemp > 50) currTemp = 50
  fillHeight = therCanv.height/5 + 4*currTemp*therCanv.height/250

  ctx.beginPath()
  ctx.fillStyle = "#BF1226"
  ctx.fillRect(10, therCanv.height, therCanv.width - 120, -fillHeight)
  ctx.drawImage(thermometerImg, 0, 0, therCanv.width-100, therCanv.height)
  ctx.font = "40px Calibri"
  if(isNaN(currTemp))
    ctx.fillText("No data", 2.2*therCanv.width/4, 100)
  else
    ctx.fillText(currTemp.toFixed(1) + " °C", 2.2*therCanv.width/4, 100)


  hygrCanv = document.getElementById("hygrometer")
  ctx = hygrCanv.getContext("2d")
  ctx.beginPath()
  ctx.fillStyle = "#333333"
  ctx.fillRect(0, 0, hygrCanv.width, hygrCanv.width)
  if(currHum < 0) currHum = 0
  if(currHum > 100) currHum = 100
  fillHeight = hygrCanv.height/8 + 7*currHum*hygrCanv.height/800

  ctx.beginPath()
  ctx.fillStyle = "#097479"
  ctx.fillRect(10, hygrCanv.height, hygrCanv.width - 120, -fillHeight)
  ctx.drawImage(hygrometerImg, 0, 0, hygrCanv.width-100, hygrCanv.height)
  ctx.font = "40px Calibri"
  if(isNaN(currHum))
    ctx.fillText("No data", 2.2*hygrCanv.width/4, 100)
  else
    ctx.fillText(currHum.toFixed(1) + " %", 2.2*hygrCanv.width/4, 100)
}

function storeData(data) {
  try {
    parsedData = JSON.parse(data)
  } catch(e) {return false;}

  for(i=0; i<numberOfSensor; i++)
    if(Number(parsedData.id.slice(-1)) === (i+1)) {
      parsedData.isValid = true

      parsedData.error = "no_err"
			if(parsedData.temperature.stdev > 40)
				parsedData.error = "Écart type de température trop élevé"
			else if(parsedData.temperature.current < -10)
				parsedData.error = "Température trop basse"
			else if(parsedData.temperature.current > 50)
				parsedData.error = "Température trop haute"
			else if(!(parsedData.temperature.min <= parsedData.temperature.avg && parsedData.temperature.avg <= parsedData.temperature.max))
				parsedData.error = "Incohérence des relevés : Tmin <= Tavg <= Tmax n'est pas respecté"

			else if(parsedData.humidity.stdev > 40)
				parsedData.error = "Écart type d'humidité trop élevé"
			else if(parsedData.humidity.current < -10)
				parsedData.error = "Température trop basse"
			else if(parsedData.humidity.current > 50)
				parsedData.error = "Température trop haute"
			else if(!(parsedData.humidity.min <= parsedData.humidity.avg && parsedData.humidity.avg <= parsedData.humidity.max))
					parsedData.error = "Incohérence des relevés : Hmin <= Havg <= Hmax n'est pas respecté"

			if(!parsedData.error === "no_err")
				parsedData.isValid = false

      //We limit the number of data stored on client side for each sensor to avoid lag
      if(sensorsData[i].length > 50)
        sensorsData[i].pop()

      sensorsData[i].unshift(parsedData)
    }

  if(Number(parsedData.id.slice(-1)) === 3 && parsedData.isValid)
    postOnDatabase(parsedData)

  if(Number(parsedData.id.slice(-1)) === numberOfSensor)
    return true

  return false
}

function postOnDatabase(parsedData) {
  var dbData = {
    sensor: parsedData.id,
    timestamp: parsedData.date,
    tcurrent: parsedData.temperature.current,
    tmin: parsedData.temperature.min,
    tmax: parsedData.temperature.max,
    tavg: parsedData.temperature.avg,
    tstddev: parsedData.temperature.stddev,
    hcurrent: parsedData.humidity.current,
    hmin: parsedData.humidity.min,
    hmax: parsedData.humidity.max,
    havg: parsedData.humidity.avg,
    hstddev: parsedData.humidity.stddev
  }

	for(key in dbData)
		if(!dbData[key])
			dbData[key] = 0;

  $.ajax({
    url: "http://51.38.239.114/db3",
    type: "POST",
    beforeSend: function(request) {
      request.setRequestHeader("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZGIzIn0.RjMVon_kqMN2bZd2qzJI7MfRqDmWi7MX28ZnyXk1DGw")
    },
    data: dbData,
    error: function(err) {console.log("[ERROR] ", err.responseText, "\n", dbData)}
  });
}

function clearDatabase() {
  $.ajax({
    url: "http://51.38.239.114/db3",
    type: "DELETE",
    beforeSend: function(request) {
      request.setRequestHeader("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZGIzIn0.RjMVon_kqMN2bZd2qzJI7MfRqDmWi7MX28ZnyXk1DGw")
    },
    success: function() {console.log("Database cleared")},
    error: function(err) {console.log("[ERROR] ", err.responseText)}
  });
}

function getDataFromDatabase(db) {
  $.ajax({
    url: "http://51.38.239.114/db"+(db+1),
    type: "GET",
    success: function(dbData) {
      for(j=0; j<dbData.length; j++) {
        var sensorData = {
          id: dbData[j].sensor,
          date: dbData[j].timestamp,
          isValid: true,
          temperature: {
            avg: dbData[j].tavg,
            min: dbData[j].tmin,
            max: dbData[j].tmax,
            stddev: dbData[j].tstddev,
            current: dbData[j].tcurrent
          },
          humidity: {
            avg: dbData[j].havg,
            min: dbData[j].hmin,
            max: dbData[j].hmax,
            stddev: dbData[j].hstdev,
            current: dbData[j].hcurrent
          }
        }

        id = Number(sensorData.id.substring(1)) - 1
        if(!isNaN(id))
          if(id >= 0 && id < numberOfSensor && id == db) {
            sensorsData[id].unshift(sensorData)
          }
      }

      if(db < numberOfSensor-1)
        getDataFromDatabase(db+1)
      else
        main();
    },
    error: function(err) {
      console.log("[ERROR] ", err.responseText)
      if(db < numberOfSensor-1)
        getDataFromDatabase(db+1)
      else
        main();
    }
  });
}

function printData() {
  console.log(sensorsData)
}

function initializeCharts() {
  var tempPoints = [[]]
  var humPoints = [[]]
  if(sensorsData[2].length > 0) {
    tempPoints = [[Date.parse(sensorsData[2][0].date)+7200000, sensorsData[2][0].temperature.current]]
    humPoints = [[Date.parse(sensorsData[2][0].date)+7200000, sensorsData[2][0].humidity.current]]

    for(i = 1; i < Math.min(sensorsData[2].length, 50); i++) {
      tempPoints.push([Date.parse(sensorsData[2][i].date)+7200000, sensorsData[2][i].temperature.current])
      humPoints.push([Date.parse(sensorsData[2][i].date)+7200000, sensorsData[2][i].humidity.current])
    }

    tempPoints.sort(function(a,b) {return a[0] - b[0]});
    humPoints.sort(function(a,b) {return a[0] - b[0]});
  }

  tempChart = Highcharts.chart('temperatureChart', {
    chart: {
      type: "spline",
      backgroundColor: "#333333"
    },
    title: {
      text: "Les dernières températures reçues",
      style: {
        color: "#BF1226",
        fontWeight: "bold"
      }
    },
    xAxis: {
      type: "datetime",
      title: {
        text: "Date",
        style: {color: "#FFFFFF"}
      },
      labels: {
        text: "Date",
        style: {
          color: "#FFFFFF",
          fontWeight: "20px bold"
        }
      }
    },
    yAxis: {
      title: {
        text: "T °C",
        style: {color: "#FFFFFF"}
      },
      labels: {
        style: {
          color: "#FFFFFF",
          fontWeight: "20px bold"
        }
      }
    },
    legend: {
      itemStyle: {color: "#FFFFFF"},
      itemHoverStyle: {color: "#FFFFFF"}
    },
    series: [{
      name: "Températures",
      color: "#BF1226",
      data: tempPoints
    }]
  });

  humChart = Highcharts.chart('humidityChart', {
    chart: {
      type: "spline",
      backgroundColor: "#333333"
    },
    title: {
      text: "Les dernières humidités reçues",
      style: {
        color: "#097479",
        fontWeight: "bold"
      }
    },
    xAxis: {
      type: "datetime",
      title: {
        text: "Date",
        style: {color: "#FFFFFF"}
      },
      labels: {
        text: "Date",
        style: {
          color: "#FFFFFF",
          fontWeight: "20px bold"
        }
      }
    },
    yAxis: {
      title: {
        text: "H %",
        style: {color: "#FFFFFF"}
      },
      labels: {
        style: {
          color: "#FFFFFF",
          fontWeight: "20px bold"
        }
      }
    },
    legend: {
      itemStyle: {color: "#FFFFFF"},
      itemHoverStyle: {color: "#FFFFFF"}
    },
    series: [{
      name: "Humidité",
      color: "#097479",
      data: humPoints
    }]
  });
}
