compt = 1;
function displayNav() {
	$('nav').toggle();
	if(compt%2 == 0)
		$('.bloc').css('margin-left','85px');
	else
		$('.bloc').css('margin-left','10px');

	compt++;
}

function showHideWarnings() {
	if(sensorsAvg[0].length == 0)
		return;

	if(sensorsAvg[0].temperature.current < 10) {
		$(".warning1").css('visibility','visible')
		$(".warning1").attr("title", "Température basse !");
	} else if(sensorsAvg[0].temperature.current > 25) {
		$(".warning1").css('visibility','visible')
		$(".warning1").attr("title", "Température élevée !");
	} else
		$(".warning1").css('visibility','hidden')

	if(sensorsAvg[0].humidity.current < 40) {
		$(".warning2").css('visibility','visible')
		$(".warning2").attr("title", "Humidité basse !");
	} else if(sensorsAvg[0].humidity.current > 80) {
		$(".warning2").css('visibility','visible')
		$(".warning2").attr("title", "Humidité élevée !");
	} else
		$(".warning2").css('visibility','hidden')
}

function changeListStyle() {
  temp = sensorsAvg[0].temperature.current;
  hum = sensorsAvg[0].humidity.current;

  $("li").css("color", "white")
  $(".therm > li, .hygro > li").css("color", "red")
  $("#alert, .therm, .hygro").hide();

  if(temp < 10) {
    $(".thermlow > li").css("color", "red")
    $(".alert").show();
    $(".therm").show();
  } else if(temp > 25) {
    $(".thermhigh > li").css("color", "red")
    $(".alert").show();
    $(".therm").show();
  }

  if(hum < 40) {
    $(".hygrolow > li").css("color", "red")
    $(".alert").show();
    $(".hygro").show();
  } else if (hum > 80) {
    $(".hygrohigh > li").css("color", "red")
    $(".alert").show();
    $(".hygro").show();
  }
}

function generateJSONData(minT, maxT, minH, maxH, cpt) {
  var date = new Date()
  var data = {
    "id": "D"+(cpt+1),
    "date": date,
    "temperature": {
      "avg": Math.random()*(maxT-minT)+minT,
      "min": Math.random()*(maxT-minT)+minT,
      "max": Math.random()*(maxT-minT)+minT,
      "stddev": Math.random()*30,
      "current": Math.random()*(maxT-minT)+minT
    },
    "humidity": {
      "avg": Math.random()*(maxH-minH)+minH,
      "min": Math.random()*(maxH-minH)+minH,
      "max": Math.random()*(maxH-minH)+minH,
      "stddev": Math.random()*30,
      "current": Math.random()*(maxH-minH)+minH
    }
  }

  return JSON.stringify(data)
}

generateData = true
function autoGenerateData() {
  for(j=0; j<numberOfSensor; j++) {
    data = generateJSONData(0, 50, 0, 100, j)
    if(storeData(data))
      main();
  }
}

//Global var
thermometerImg = null
hygrometerImg = null
sensorsData = []
sensorsAvg = []
numberOfSensor = 7
tempChart = null
humChart = null
function loadWebpageData() {
  thermometerImg = new Image()
  thermometerImg.src = "../icons/thermometer_empty.png"
  hygrometerImg = new Image()
  hygrometerImg.src = "../icons/hygrometer_empty.png"

  $(".warning1, .warning2").css("visibility", "hidden");
  $("#alert, .therm, .hygro").hide();

  for(i=0; i<numberOfSensor; i++)
    sensorsData.push([])

  if(generateData) {
    autoGenerateData();
    setInterval(autoGenerateData, 1000);
    return;
  }

  ws = new WebSocket('ws://51.38.239.114:8080');
  ws.onopen = function () {console.log('Connected to the broker');};
  ws.onmessage = function (evt) {
    if(storeData(evt.data))
      main();
  };
  ws.onclose = function () {console.log('Socket closed');};
}

function main() {
  if(sensorsAvg.length > 50)
    sensorsAvg.pop()

  avg = getSensorsDataAverage()
  if(!avg)
    return;

  sensorsAvg.unshift(avg)

  refreshCanvasHeader(sensorsAvg[0].temperature.current, sensorsAvg[0].humidity.current)
  showHideWarnings();
  changeListStyle();
}

function getSensorsDataAverage() {
  var sAvg = {
    date: 0,
    temperature: {
      current: 0,
      avg: 0,
      min: 0,
      max: 0
    },
    humidity: {
      current: 0,
      avg: 0,
      min: 0,
      max: 0
    }
  }

  validData = 0
  for(i=0; i<sensorsData.length; i++) {
    if(sensorsData[i].length == 0) {
      continue;
    }

    if(!sensorsData[i][0].isValid)
      continue;

    validData++;

    if(sAvg.date == 0)
      sAvg.date = sensorsData[i][0].date

    sAvg.temperature.current += sensorsData[i][0].temperature.current
    sAvg.temperature.avg += sensorsData[i][0].temperature.avg
    sAvg.temperature.min += sensorsData[i][0].temperature.min
    sAvg.temperature.max += sensorsData[i][0].temperature.max
    sAvg.humidity.current += sensorsData[i][0].humidity.current
    sAvg.humidity.avg += sensorsData[i][0].humidity.avg
    sAvg.humidity.min += sensorsData[i][0].humidity.min
    sAvg.humidity.max += sensorsData[i][0].humidity.max
  }

  if(validData == 0)
    return null;

  sAvg.temperature.current /= validData
  sAvg.temperature.avg /= validData
  sAvg.temperature.min /= validData
  sAvg.temperature.max /= validData
  sAvg.humidity.current /= validData
  sAvg.humidity.avg /= validData
  sAvg.humidity.min /= validData
  sAvg.humidity.max /= validData

  sAvg.temperature.current = Number(sAvg.temperature.current.toFixed(2))
  sAvg.temperature.avg = Number(sAvg.temperature.avg.toFixed(2))
  sAvg.temperature.min = Number(sAvg.temperature.min.toFixed(2))
  sAvg.temperature.max = Number(sAvg.temperature.max.toFixed(2))
  sAvg.humidity.current = Number(sAvg.humidity.current.toFixed(2))
  sAvg.humidity.avg = Number(sAvg.humidity.avg.toFixed(2))
  sAvg.humidity.min = Number(sAvg.humidity.min.toFixed(2))
  sAvg.humidity.max = Number(sAvg.humidity.max.toFixed(2))

  return sAvg;
}

function refreshCanvasHeader(currTemp, currHum) {
  therCanv = document.getElementById("thermometer")
  ctx = therCanv.getContext("2d")
  ctx.beginPath()
  ctx.fillStyle = "#333333"
  ctx.fillRect(0, 0, therCanv.width, therCanv.width)

  if(currTemp < 0) currTemp = 0
  if(currTemp > 50) currTemp = 50
  fillHeight = therCanv.height/5 + 4*currTemp*therCanv.height/250

  ctx.beginPath()
  ctx.fillStyle = "#BF1226"
  ctx.fillRect(10, therCanv.height, therCanv.width - 120, -fillHeight)
  ctx.drawImage(thermometerImg, 0, 0, therCanv.width-100, therCanv.height)
  ctx.font = "40px Calibri"
  if(isNaN(currTemp))
    ctx.fillText("No data", 2.2*therCanv.width/4, 100)
  else
    ctx.fillText(currTemp.toFixed(1) + " °C", 2.2*therCanv.width/4, 100)


  hygrCanv = document.getElementById("hygrometer")
  ctx = hygrCanv.getContext("2d")
  ctx.beginPath()
  ctx.fillStyle = "#333333"
  ctx.fillRect(0, 0, hygrCanv.width, hygrCanv.width)
  if(currHum < 0) currHum = 0
  if(currHum > 100) currHum = 100
  fillHeight = hygrCanv.height/8 + 7*currHum*hygrCanv.height/800

  ctx.beginPath()
  ctx.fillStyle = "#097479"
  ctx.fillRect(10, hygrCanv.height, hygrCanv.width - 120, -fillHeight)
  ctx.drawImage(hygrometerImg, 0, 0, hygrCanv.width-100, hygrCanv.height)
  ctx.font = "40px Calibri"
  if(isNaN(currHum))
    ctx.fillText("No data", 2.2*hygrCanv.width/4, 100)
  else
    ctx.fillText(currHum.toFixed(1) + " %", 2.2*hygrCanv.width/4, 100)
}

function storeData(data) {
  try {
    parsedData = JSON.parse(data)
  } catch(e) {return false;}

  for(i=0; i<numberOfSensor; i++)
    if(Number(parsedData.id.slice(-1)) === (i+1)) {
      parsedData.isValid = false

      parsedData.error = "no_err"
      if(parsedData.temperature.stdev > 40)
        parsedData.error = "Écart type de température trop élevé"
      else if(parsedData.temperature.current < -10)
        parsedData.error = "Température trop basse"
      else if(parsedData.temperature.current > 50)
        parsedData.error = "Température trop haute"
      else if(!(parsedData.temperature.min <= parsedData.temperature.avg && parsedData.temperature.avg <= parsedData.temperature.max))
        parsedData.error = "Incohérence des relevés : Tmin <= Tavg <= Tmax n'est pas respecté"

      else if(parsedData.humidity.stdev > 40)
        parsedData.error = "Écart type d'humidité trop élevé"
      else if(parsedData.humidity.current < 0)
        parsedData.error = "Humidité trop basse"
      else if(parsedData.humidity.current > 100)
        parsedData.error = "Humidité trop haute"
      else if(!(parsedData.humidity.min <= parsedData.humidity.avg && parsedData.humidity.avg <= parsedData.humidity.max))
        parsedData.error = "Incohérence des relevés : Hmin <= Havg <= Hmax n'est pas respecté"

      if(parsedData.error === "no_err")
        parsedData.isValid = true

      //We limit the number of data stored on client side for each sensor to avoid lag
      if(sensorsData[i].length > 50)
        sensorsData[i].pop()

      sensorsData[i].unshift(parsedData)
    }

  if(Number(parsedData.id.slice(-1)) === 3 && parsedData.isValid)
    postOnDatabase(parsedData)

  if(Number(parsedData.id.slice(-1)) === numberOfSensor) {
    return true
  }

  return false
}

function postOnDatabase(parsedData) {
  var dbData = {
    sensor: parsedData.id,
    timestamp: parsedData.date,
    tcurrent: parsedData.temperature.current,
    tmin: parsedData.temperature.min,
    tmax: parsedData.temperature.max,
    tavg: parsedData.temperature.avg,
    tstddev: parsedData.temperature.stddev,
    hcurrent: parsedData.humidity.current,
    hmin: parsedData.humidity.min,
    hmax: parsedData.humidity.max,
    havg: parsedData.humidity.avg,
    hstddev: parsedData.humidity.stddev
  }

	for(key in dbData)
		if(!dbData[key])
			dbData[key] = 0;

  $.ajax({
    url: "http://51.38.239.114/db3",
    type: "POST",
    beforeSend: function(request) {
      request.setRequestHeader("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZGIzIn0.RjMVon_kqMN2bZd2qzJI7MfRqDmWi7MX28ZnyXk1DGw")
    },
    data: dbData,
    error: function(err) {console.log("[ERROR] ", err.responseText, "\n", dbData)}
  });
}
